package codsoft;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Course {
    String courseCode;
    String title;
    String description;
    int capacity;
    String schedule;
    int enrolledStudents;

    public Course(String courseCode, String title, String description, int capacity, String schedule) {
        this.courseCode = courseCode;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
        this.enrolledStudents = 0;
    }

    public boolean hasAvailableSlots() {
        return enrolledStudents < capacity;
    }

    public void enrollStudent() {
        enrolledStudents++;
    }

    public void dropStudent() {
        enrolledStudents--;
    }

    public void displayCourse() {
        System.out.println("Course Code: " + courseCode);
        System.out.println("Title: " + title);
        System.out.println("Description: " + description);
        System.out.println("Capacity: " + capacity);
        System.out.println("Enrolled Students: " + enrolledStudents);
        System.out.println("Schedule: " + schedule);
        System.out.println("Available Slots: " + (capacity - enrolledStudents));
        System.out.println();
    }
}

class Student {
    String studentID;
    String name;
    List<Course> registeredCourses;

    public Student(String studentID, String name) {
        this.studentID = studentID;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }

    public void registerCourse(Course course) {
        registeredCourses.add(course);
    }

    public void dropCourse(Course course) {
        registeredCourses.remove(course);
    }

    public void displayRegisteredCourses() {
        System.out.println("Registered Courses for " + name + ":");
        for (Course course : registeredCourses) {
            course.displayCourse();
        }
    }
}

class CourseDatabase {
    List<Course> courses;

    public CourseDatabase() {
        courses = new ArrayList<>();
    }

    public void addCourse(Course course) {
        courses.add(course);
    }

    public Course getCourseByCode(String courseCode) {
        for (Course course : courses) {
            if (course.courseCode.equals(courseCode)) {
                return course;
            }
        }
        return null;
    }

    public void displayCourses() {
        System.out.println("Available Courses:");
        for (Course course : courses) {
            course.displayCourse();
        }
    }
}

class StudentDatabase {
    List<Student> students;

    public StudentDatabase() {
        students = new ArrayList<>();
    }

    public void addStudent(Student student) {
        students.add(student);
    }

    public Student getStudentByID(String studentID) {
        for (Student student : students) {
            if (student.studentID.equals(studentID)) {
                return student;
            }
        }
        return null;
    }



    public static void main(String[] args) {
        CourseDatabase courseDatabase = new CourseDatabase();
        StudentDatabase studentDatabase = new StudentDatabase();

        // Adding sample courses
        courseDatabase.addCourse(new Course("CS101", "Intro to Computer Science", "Basics of computer science", 30, "MWF 10-11AM"));
        courseDatabase.addCourse(new Course("MATH101", "Calculus I", "Introduction to Calculus", 40, "TTh 9-10:30AM"));

        // Adding sample students
        studentDatabase.addStudent(new Student("S001", "John Doe"));
        studentDatabase.addStudent(new Student("S002", "Jane Smith"));

        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("\nCourse Registration System");
            System.out.println("1. List available courses");
            System.out.println("2. Register student for a course");
            System.out.println("3. Drop student from a course");
            System.out.println("4. Display student's registered courses");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");

            int option = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (option) {
                case 1:
                    courseDatabase.displayCourses();
                    break;
                case 2:
                    System.out.print("Enter student ID: ");
                    String studentID = scanner.nextLine();
                    Student student = studentDatabase.getStudentByID(studentID);

                    if (student != null) {
                        System.out.print("Enter course code: ");
                        String courseCode = scanner.nextLine();
                        Course course = courseDatabase.getCourseByCode(courseCode);

                        if (course != null && course.hasAvailableSlots()) {
                            student.registerCourse(course);
                            course.enrollStudent();
                            System.out.println("Student registered for the course successfully.");
                        } else {
                            System.out.println("Course not found or no available slots.");
                        }
                    } else {
                        System.out.println("Student not found.");
                    }
                    break;
                case 3:
                    System.out.print("Enter student ID: ");
                    studentID = scanner.nextLine();
                    student = studentDatabase.getStudentByID(studentID);

                    if (student != null) {
                        System.out.print("Enter course code: ");
                        String courseCode = scanner.nextLine();
                        Course course = courseDatabase.getCourseByCode(courseCode);

                        if (course != null && student.registeredCourses.contains(course)) {
                            student.dropCourse(course);
                            course.dropStudent();
                            System.out.println("Student dropped from the course successfully.");
                        } else {
                            System.out.println("Course not found or student not registered for this course.");
                        }
                    } else {
                        System.out.println("Student not found.");
                    }
                    break;
                case 4:
                    System.out.print("Enter student ID: ");
                    studentID = scanner.nextLine();
                    student = studentDatabase.getStudentByID(studentID);

                    if (student != null) {
                        student.displayRegisteredCourses();
                    } else {
                        System.out.println("Student not found.");
                    }
                    break;
                case 5:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
                    break;
            }
        }
    }
}

public class Courseregistration {

}
